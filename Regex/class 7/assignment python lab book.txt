1. Define a function generate_n_chars() that takes an integer n and a character c and returns a string, n
characters long, consisting only of c:s. For example, generate_n_chars(5,"x") should return the string
"xxxxx". (Python is unusual in that you can actually write an expression 5 * "x" that will evaluate to
"xxxxx". For the sake of the exercise you should ignore that the problem can be solved in this
manner.)

CODE :- 
def n_chars(n , c):
    pattern = ""
    for i in range (0,n):
        pattern = pattern + c
    return pattern
n_chars(5,"x")



2. The function max() from exercise 1) and the function max_of_three() from exercise 2) will only
work for two and three numbers, respectively. But suppose we have a much larger number of
numbers, or suppose we cannot tell in advance how many they are? Write a function max_in_list()
that takes a list of numbers and returns the largest one.

CODE:- 
def max_in_list(x):
    greatest = x[0]
    for i in x :
        if greatest < i :
            greatest = i 
        else :
            pass
    return greatest 
max_in_list([10,20,60,40,50])



3. Write a program that maps a list of words into a list of integers representing the lengths of the
correponding words.

CODE :-
list_of_words = ["apple","banana","mango"]
list_of_length = []
for i in list_of_words :
    count = 0
    for j in i :
        count = count + 1
    list_of_length.append(count)
print (list_of_length)



4. Write a function find_longest_word() that takes a list of words and returns the length of the longest
one. Modify the same to do with lambda expression.

CODE :- 
def find_longest_word(list_of_words):
    longest_word = ""
    count_n = 0
    for i in list_of_words :
        count = 0
        for j in i :
            count = count + 1
        if count_n < count :
            count_n = count 
            longest_word = i
        else :
            pass 
    return longest_word , count_n
find_longest_word(["apple","banana","mango"])


longest_word = lambda list_of_words , count = 0 : max( len(word) for word in list_of_words if len(word) > count )
longest_word(["apple", "banana", "watermelon"])



5. Write a function filter_long_words() that takes a list of words and an integer n and returns the list
of words that are longer than n. Modify the same to do with lambda expression.

CODE :-
def filter_long_words(list_of_words , n):
    nl = []
    for i in list_of_words:
        if len(i) > n :
            nl.append(i)
        else :
            pass 
    return nl 
filter_long_words(["apple", "banana", "mango", "watermelon"],5)

filter_long_words = lambda list_of_words , n : [ words for words in list_of_words if len(words) > n ]
filter_long_words(["apple", "banana", "mango", "watermelon"],5)



6. Write a version of a palindrome recognizer that also accepts phrase palindromes such as "Go hang a
salami I'm a lasagna hog.", "Was it a rat I saw?", "Step on no pets", "Sit on a potato pan, Otis", "Lisa
Bonet ate no basil", "Satan, oscillate my metallic sonatas", "I roamed under it as a tired nude Maori",
"Rise to vote sir", or the exclamation "Dammit, I'm mad!". Note that punctuation, capitalization, and
spacing are usually ignored.

CODE :-
word = input("Enter a String : ")
words = word.lower()
string = words.replace(" ", "")
reverse = string[-1::-1]
print ("String Entered ", word)
print ("String in all Lower Letters : " ,words)
print ("String without Spaces : " ,string)
print ("Reversed String : " , reverse)
if reverse == string  :
    print ("the word is a palindrome")
else :
    print ("the word is not a palindrome")



7. A pangram is a sentence that contains all the letters of the English alphabet at least once, for
example: The quick brown fox jumps over the lazy dog. Your task here is to write a function to check
a sentence to see if it is a pangram or not.

CODE :- 
word = input("Enter a string : ")
words = word.upper()
count = 0 
for i in range (65, 91) :
    if chr(i) in words :
        count += 1
    else :
        count = 0
        break 
if count > 0 :
    print ("The entered String is a Panagram")
else :
    print ("The entered String is not a Panagram")



8. Represent a small bilingual lexicon as a Python dictionary in the following fashion {"merry":"god",
"christmas":"jul", "and":"och", "happy":gott", "new":"nytt", "year":"år"} and use it to translate your
Christmas cards from English into Swedish. That is, write a function translate() that takes a list of
English words and returns a list of Swedish words.

CODE :- 
bilingual = {"merry":"god","christmas":"jul", "and":"och", "happy":"gott", "new":"nytt", "year":"år"}
def translate (input_string):
    spanish = ""
    for i in input_string :
        if i in bilingual :
            spanish = spanish + bilingual[i] + " "
        else :
            spanish = spanish + "**"+ i + "**" + " "
    print (spanish)
input_string = input("Enter your english word separed by space : ")
input_s = input_string.split(" ")
translate (input_s)     



9. Write a function char_freq() that takes a string and builds a frequency listing of the characters
contained in it. Represent the frequency listing as a Python dictionary. Try it with something
likechar_freq("abbabcbdbabdbdbabababcbcbab").

CODE :-
def char_feq(input_string):
    nd = {}
    for i in input_string :
        if i in nd :
            nd[i] = nd[i] + 1
        else :
            nd [i] = 1
    print ("Frequncy of charcters are : ", nd)
string = input("Enter a String :- ")
char_feq(string)



10. Create a module called mathematics.py and provide subroutines (should be defined generally and
should work for any number of arguments) such as:
Add Sub
Sort the values Max Sort
Use the module in a program and apply the functions on two array variables (say a and b) to:
Add two arrays (and store it in c) Subtract two arrays(and store it in d)
Find the minimum and maximum value of the resultant array (c or d) Sort the resultant array(c or d)

CODE :- 
1. Make a python file mathematics.py
CODE :- mathematics.py
def add(*args):
    total = 0
    for i in args:
        total += i
    return total

def subtract(*args):
    result = args[0]
    for num in args[1:]:
        result -= num
    return result

def maximum(*args):
    max_val = args[0]
    for i in args:
        if i > max_val:
            max_val = i
    return max_val

def minimum(*args):
    min_val = args[0]
    for i in args:
        if i < min_val:
            min_val = i
    return min_val

def bubble_sort(*args):
    arr = list(args)
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
    return arr

2. Make a python file to write your code 
CODE :- test 
import mathematics

a = [1, 2, 3, 4]
b = [5, 6, 7, 8]
c = []
d = []

for x, y in zip(a, b):
    c.append(mathematics.add(x, y))

print("Sum of Array a and b =", c)

for x, y in zip(a, b):
    d.append(mathematics.subtract(x, y))

print("Subtract of a and b =", d)

e = mathematics.maximum(*c)
print("Max of Sum of Array a and b that is c =", e)

f = mathematics.minimum(*c)
print("Min of Sum of Array a and b that is c =", f)

g = mathematics.bubble_sort(*c)
print("Sorted array c:", g)


11. Try above programme with package.
To make a package 
1. Make a folder named math_package 
2. place your mathematics.py in this math_package folder 
3. in test.py file in place of import mathematics write from math_package import mathematics 
4. Run your code 


